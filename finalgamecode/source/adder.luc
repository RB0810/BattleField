module adder (
// Note: a & b are 8-bit inputs. ALUFN is a 6-bit input
// z, v, n are all 1-bit outputs.
    input a[16],
    input b[16],
    input alufn_signal[6],
    output out[16],
    output z[1],
    output v[1],
    output n[1]
  ) {
  sig s[16];
  
  always {
  
        case (alufn_signal[0]){
          b0:
            s=a+b;
            v = (a[15] & (b[15] ^ alufn_signal[0]) & !s[15]) | (!a[15] & !(b[15] ^ alufn_signal[0]) & s[15]);
        
            case (alufn_signal){
              b001000: //decrement 1
                s = a - 1; 
                v = (a[15] & (b[15] ^ alufn_signal[0]) & !s[15]) | (!a[15] & !(b[15] ^ alufn_signal[0]) & s[15]);
               
              b001100://increment 5
                s = a + 5;
                v = (a[15] & (b0) & !s[15]) | (!a[15] & !(b0) & s[15]);} //as b is 00000...011 and b[15] will be 0

          b1:
            s=a-b;
            v = (a[15] & (b[15] ^ alufn_signal[0]) & !s[15]) | (!a[15] & !(b[15] ^ alufn_signal[0]) & s[15]);
          
      default:
        s=0;
        v = (a[15] & (b[15] ^ alufn_signal[0]) & !s[15]) | (!a[15] & !(b[15] ^ alufn_signal[0]) & s[15]); 
      }
    
      z = (s[15:0] == 0);
      n = s[15]; //true when S is negative ie s31 = 1 (signed)
      out = s[15:0];
}