module rom (
    input address[6], 
    output inputa[16],
    output inputb[16],
    output alufn[6],
    output romvalue[16]
  ) {
  
  //hardcoded test cases
  
  const ROM_ALU = {16b0000000000000000, 16b0000000000000000, 16b0000000000000000, 16b000000000000001, 16b0000000000000001, 16b0000000000000000, 16b0000000000000001, 16b0000000000000001, \
  16b0000000000000000, 16b1111111000011111, 16b0011111111111000, 16b0000001000011111, 16b0011111111111000, 16b1111110000000000, 16b0000000000000000, \
  16b0100111101010111, 16b1100110101000100, 16b1100111101010111, 16b0000001000010011, 16b0001000101110101, 16b0100111101011010, 16b0000000000000010, \
  16b1000000000000010, 16b0111111111110011, 16b0100111101011000, 16b0000000000000000, 16b1000000000000000, 16b0111111111110001, 16b1111111111111110, \
  16b1101000101101010, 16b0000000000000000, 16b0000111010101001, 16b1111111111101111, 16b1101000101101010, 16b0000000000000000, 16b0000111010101001, \
  16b1111111111101111};  
  always {
  
    romvalue = ROM_ALU[address];
    
    //testcase1
    case(address){
    
      6b000000:
        inputa = 16b0111111111110000;
        inputb = 16b0111111111111111;
        alufn = 6b000000;
        
      6b000001:
        inputa = 16b1000011111111111;
        inputb = 16b1000011010101010;
        alufn = 6b000000;
        
      6b000010:
        inputa = 16b1111111111111111;
        inputb = 16b0000000000000001;
        alufn = 6b000000;
      
      6b000011:
        inputa = 16b0100111101010111;
        inputb = 16b1000001000010011;
        alufn = 6b000000;
        
     6b000100:
        inputa = 16b0111111111110000;
        inputb = 16b1000000000000001;
        alufn = 6b000001;
     
     6b000101:
        inputa = 16b1000011111111111;
        inputb = 16b0111100101010110;
        alufn = 6b000001; 

     6b000110:
        inputa = 16b1111111111111111;
        inputb = 16b1111111111111111;
        alufn = 6b000001; 
        
     6b000111:
        inputa = 16b0100111101010111;
        inputb = 16b0111110111101101;
        alufn = 6b000001; 
                
     6b001000:
        inputa = 16b1111111111111111;
        inputb = 16b0000000000000001;
        alufn = 6b000001; 
       
     6b001001:
        inputa = 16b0111111111110000;
        inputb = 16b0111111111111111;
        alufn = 6b001000; 
        
     6b001010:
        inputa = 16b0111111111111111;
        inputb = 16b0111111111111111;
        alufn = 6b001000; 
        
     6b001011:
        inputa = 16b1111111111111111;
        inputb = 16b0100111101010111;
        alufn = 6b001000; 
        
     6b001100:
        inputa = 16b0100111101010111;
        inputb = 16b1000001000010011;
        alufn = 6b001000; 
       
      6b001101:
        inputa = 16b0111111111110000;
        inputb = 16b0111111111111111;
        alufn = 6b001100;  
        
     6b001110:
        inputa = 16b0111111111111111;
        inputb = 16b0111111111111111;
        alufn = 6b001100; 
        
     6b001111:
        inputa = 16b1111111111111111;
        inputb = 16b0100111101010111;
        alufn = 6b001100;    
        
     6b010000:
        inputa = 16b0100111101010111;
        inputb = 16b1000001000010011;
        alufn = 6b001100; 
       
     6b010001:
        inputa = 16b0100111101010111;
        inputb = 16b1000001000010011;
        alufn = 6b000010;  
        
     6b010010:
        inputa = 16b0100111101010111;
        inputb = 16b1000001000010011;
        alufn = 6b011000;  
        
     6b010011:
        inputa = 16b0100111101010111;
        inputb = 16b1000001000010011;
        alufn = 6b011110;   
        
     6b010100:
        inputa = 16b0100111101010111;
        inputb = 16b1000001000010011;
        alufn = 6b010110;
        
     6b010101:
        inputa = 16b0100111101010111;
        inputb = 16b1000001000010011;
        alufn = 6b011010; 
     ///   
     6b010110:
        inputa = 16b0111111111110000;
        inputb = 16b0111111111111111;
        alufn = 6b100000;
        
     6b010111:
        inputa = 16b1000011111111111;
        inputb = 16b1000011010101010;
        alufn = 6b100000;  
        
     6b011000:
        inputa = 16b0111111111110000;
        inputb = 16b1000000000000001;
        alufn = 6b100001;   

    6b011001:
        inputa = 16b1000011111111111;
        inputb = 16b0111100101010110;
        alufn = 6b100001;
        
    6b011010:
        inputa = 16b0111111111110000;
        inputb = 16b1000000000000001;
        alufn = 6b100011;   
        
    6b011011:
        inputa = 16b1000011111111111;
        inputb = 16b0111100101010110;
        alufn = 6b100011; 
        
    6b011100:
        inputa = 16b1111111111111111;
        inputb = 16b0000000000000001;
        alufn = 6b110011;
        
    6b011101:
        inputa = 16b1111111111111111;
        inputb = 16b1111111111111111;
        alufn = 6b110011;  
        
    6b011110:
        inputa = 16b1000011111111111;
        inputb = 16b0111100101010110;
        alufn = 6b110101;
        
    6b011111:
        inputa = 16b0011111111111000;
        inputb = 16b0001111000000000;
        alufn = 6b110101; 
        
    6b100000:
        inputa = 16b1111111111111111;
        inputb = 16b1111111111111111;
        alufn = 6b110111; 
        
    6b100001:
        inputa = 16b1000011111111111;
        inputb = 16b0111100101010110;
        alufn = 6b110111; 
        
    6b100010:
        inputa = 16b0011111111111000;
        inputb = 16b0001111000000000;
        alufn = 6b110111;
        
    6b100011:
        inputa = 16b0000000000000000;
        inputb = 16b0000000000000000;
        alufn = 6b000000;
        
    6b100100:
        inputa = 16b0000000000000000;
        inputb = 16b0000000000000000;
        alufn = 6b000001;
        
    default:
       inputa = 16b0;
       inputb = 16b0;
       alufn = 6b0;                                                                                                                                                                   
    }
     
}
